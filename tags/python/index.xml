<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on</title><link>/tags/python/</link><description>Recent content in python on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 21 Dec 2021 12:00:00 -0300</lastBuildDate><atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Auto ativar e desativar python venv usando zsh</title><link>/posts/pyenv/</link><pubDate>Tue, 21 Dec 2021 12:00:00 -0300</pubDate><guid>/posts/pyenv/</guid><description>Quando aprendi sobre o python venv (apt-get install python3-venv) me converti na hora. É simples, padrão e explícito.
Agora toda vez que crio um projeto automaticamente executo python3 -mvenv venv &amp;amp;&amp;amp; source ./venv/bin/activate.
Mas digitar ./venv/bin/activate e depois deactivate é muito trabalho para meu cérebro preguiçoso de programadora.
Então decidi investir finalmente 10 minutos para me liberar de ficar ativando e desativando esse negócio toda vez que eu entrasse ou saísse de uma pasta de projeto com minha pastinha padrão .</description></item><item><title>Python3 + GTK+3 + Glade + Templates = &lt;3</title><link>/posts/pygtk-glade/</link><pubDate>Sun, 28 Mar 2021 19:00:00 -0300</pubDate><guid>/posts/pygtk-glade/</guid><description>Vários softwares que você usa no ambiente Gnome podem ter sido desenvolvidos em Python. Aplicativos como Gnome Music e Gnome Tweaks são alguns exemplos disso.
Neste artigo eu vou mostrar um exemplo mínimo para que você tenha um ponto de partida para suas idéias. Vamos lá:
Crie um layout básico usando o editor Glade: Coisas para prestar atenção:
O componente raiz é um GtkApplicationWindow (aparece quando clica no botão Toplevels) Com ele selecionado, marque a checkbox Composite lá na direita (super importante!</description></item><item><title>Como eu compilo o OpenCV no Linux com um monte de penduricalhos (CuDNN, CUDA, OpenGL, Qt, TrueType, CODECs de Video)</title><link>/posts/opencv/</link><pubDate>Tue, 16 Feb 2021 12:00:00 -0300</pubDate><guid>/posts/opencv/</guid><description>OpenCV é uma biblioteca gigante. Mas ao mesmo tempo bastante flexível. Você escolhe o que a sua versão vai ter através da instalação ou não no seu sistema de dependências opcionais.
Neste artigo vou mostrar como eu faço para compilar o OpenCV com a maior linha de comando de cmake que já escrevi. Vou também adicionar comentários para que você entenda o que é necessário para compilar com sucesso.
Vamos começar.</description></item><item><title>Versões pré-compiladas de Pytorch</title><link>/posts/pre-compiled-pytorch/</link><pubDate>Wed, 20 Jan 2021 15:00:00 -0300</pubDate><guid>/posts/pre-compiled-pytorch/</guid><description>Acabo de descobrir um repositório que salvou minha pele, então resolvi vir aqui compartilhar com vocês.
Se você abrir o site do pytorch, ele te apresenta algumas opções de instalação:
A questão é que, se você quiser instalar uma versão diferente da apresentada (hoje é a 1.7.1), vai começar uma caça ao tesouro bem chatinha&amp;hellip;
Existe uma página - que sei lá o porquê me levou um tempo pra achar - aqui:</description></item><item><title>OpenCV instalado globalmente com autocomplete no PyCharm</title><link>/posts/opencv-autocomplete-pycharm/</link><pubDate>Mon, 28 Dec 2020 12:00:00 -0300</pubDate><guid>/posts/opencv-autocomplete-pycharm/</guid><description>Intro Por um bom tempo utilizei o módulo virtualenv. Mas desde que aprendi sobre o módulo padrão de python venv nunca mais voltei.
Pra começar ele já vem instalado com o python (se não veio, basta instalar o pacote python3-venv). Ele também é mais previsível do que o virtualenv, já que não é necessário mexer nos seus arquivos de login .{bash/zsh/fish}rc e o uso padrão é instalá-lo na raíz do seu projeto.</description></item></channel></rss>